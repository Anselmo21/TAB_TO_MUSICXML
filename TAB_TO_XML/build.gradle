/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'jacoco'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.2'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

	compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.10.6'

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.13'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testCompile 'org.testfx:testfx-core:4.0.16-alpha'
    testCompile 'org.testfx:testfx-junit5:4.0.16-alpha'
    implementation 'org.mockito:mockito-android:3.9.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped','failed'
    }
    finalizedBy jacocoTestReport
}

run {    
    if (javafx.platform.classifier == 'win') {
        systemProperty "java.library.path", "C:\tmp"
    }
}

mainClassName = 'Interface.Runner'

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
    version = "15.0.1"
}


jacoco {
	toolVersion="0.8.6"
	reportsDirectory = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	dependsOn test
}

task uberJar(type: Jar) {
	manifest {
		attributes 'Main-Class': 'Interface.Runner'
	}
	archiveClassifier = 'uber'
	
	from sourceSets.main.output
	
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll {it.name.endsWith('jar')}.collect{ zipTree(it) }
	}
}

task debug {
	group = "application"
	description = "Runs this project on debug mode"
	doFirst {
		application {
			applicationDefaultJvmArgs = ['-Xdebug', '-Xrunjdwp: transport=dt_socket, server=y,suspend=y,address=2311']
		}
	}
}

debug.finalizedBy run